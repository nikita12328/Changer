#                               Задание 1
# Дан список повторяющихся элементов. 
# Вернуть список с дублирующимися элементами. 
# В результирующем списке не должно быть дубликатов. на входе [1,2,3,1,2,5,6] , на выходе [1,2]

list = [1, 2, 3, 1, 2, 5, 6]
duplicates = []
for item in list:
    if list.count(item) > 1 and item not in duplicates:
        duplicates.append(item)
print(duplicates)



#-----------------------------------------------------------------------------------------------------
#                               Задание 2
#В большой текстовой строке подсчитать количество встречаемых слов и вернуть 10 самых частых. 
# Не учитывать знаки препинания и регистр символов.
# За основу возьмите любую статью из википедии или из документации к языку.



import re
from collections import Counter


def top_10_words(text):
    words = re.findall(r'\b\w+\b', text.lower())
    return Counter(words).most_common(10)


# text = ('Эталонной реализацией Python является интерпретатор CPython, который поддерживает большинство активно используемых платформ'
#         ' и являющийся стандартом де-факто языка. Он распространяется под свободной лицензией Python Software Foundation License'
#         ' позволяющей использовать его без ограничений в любых приложениях, включая проприетарные'
#         ' CPython компилирует исходные тексты в высокоуровневый байт-код, который исполняется в стековой виртуальной машине'
#         ' PyPy написан на подмножестве языка Python (RPython) и разрабатывался как альтернатива CPython с целью повышения скорости исполнения программ,'
#         '  в том числе за счёт использования JIT-компиляции[41]. Поддержка версии Python 2 закончилась в 2020 году[42]. На текущий момент активно развивается')
# print(top_10_words(text))



#------------------------------------------------------------------------------------------------------
#                               Задание 3
# Создайте словарь со списком вещей для похода в качестве ключа и их массой в качестве значения.
# Определите какие вещи влезут в рюкзак передав его максимальную грузоподъёмность.
# Достаточно вернуть один допустимый вариант. *Верните все возможные варианты комплектации рюкзака.

def pack_backpack(items, max_weight):
    possible_items = []
    for item, weight in items.items():
        if weight <= max_weight:
            possible_items.append(item)
            max_weight -= weight
    return possible_items


items = {'food': 5, 'tent': 3, 'water': 4, 'clothes': 2, 'shovel': 1}
max_weight = 10
print(pack_backpack(items, max_weight))

